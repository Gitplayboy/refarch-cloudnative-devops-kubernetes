---
stages:
- name: BUILD US-South
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  jobs:
  - name: Build BlueCompute Webapp
    type: builder
    working_dir: StoreWebApp
    artifact_dir: ''
    build_type: npm
    script: |-
      #!/bin/bash
      # The default Node.js version is 0.10.40
      # To use Node.js 0.12.7, uncomment the following line:
      export PATH=/opt/IBM/node-v0.12/bin:$PATH
      # To use Node.js 4.2.2, uncomment the following line:
      #export PATH=/opt/IBM/node-v4.2/bin:$PATH
      npm install newrelic --save
      cp node_modules/newrelic/newrelic.js ./
      npm install

- name: DEPLOY US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Build BlueCompute Webapp
  triggers:
  - type: stage
  properties:
  - name: REGION
    value: ${REGION_US}
    type: text
  - name: APP_DOMAIN
    value: ${DOMAIN_US}
    type: text
  - name: ROUTE_HOSTNAME_BFF_WEB
    value: ${ROUTE_HOSTNAME_BFF_WEB}
    type: text
  - name: ROUTE_DOMAIN_BFF_WEB
    value: ${ROUTE_DOMAIN_BFF_WEB}
    type: text
  - name: NEW_RELIC_LICENSE
    value: ${NEW_RELIC_LICENSE}
    type: text
  jobs:
  - name: Deploy BlueCompute Webapp
    type: deployer
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
      application: ${NAME_US}
    script: |
        #!/bin/bash
        set -x
        objstorage_container="bluecompute"

        # download jq
        if [ ! -f ./jq ]; then
           wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
           mv jq-linux64 jq
           chmod u+x jq
        fi

        # create objectstorage service and key
        cf services | grep Object-Storage
        if [ $? -eq 1 ]; then
            cf cs Object-Storage Free cloudnative-objstore
            for i in {1..5}
            do
                status=$(cf service "${objstorage_svc}"|grep -i 'status:'|awk '{print $NF}')
                case $status in
                    "progress") sleep 10;;
                    "succeeded") break;;
                    *) sleep 10;;
                 esac
            done
        fi
        objstorage_svc=$(cf services | grep Object-Storage | sed "s/\(.*\)\(Object-Storage\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        cf service-keys "${objstorage_svc}" | grep "No service key for service instance"
        [ $? -eq 0 ] && cf csk "${objstorage_svc}" "${objstorage_svc}-admin1"
        objstorage_key_name=$(cf service-keys "${objstorage_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        objstorage_keys=$(cf service-key "${objstorage_svc}" "${objstorage_key_name}" | grep -v "Getting key ")

        # set env for swift client
        export OS_REGION_NAME=$(echo "${objstorage_keys}" | ./jq '.region' | sed 's/"//g')
        export OS_PROJECT_ID=$(echo "${objstorage_keys}" | ./jq '.projectId' | sed 's/"//g')
        export OS_USER_ID=$(echo "${objstorage_keys}" | ./jq '.userId' | sed 's/"//g')
        export OS_PASSWORD=$(echo "${objstorage_keys}" | ./jq '.password' | sed 's/"//g')
        export OS_AUTH_URL=$(echo "${objstorage_keys}" | ./jq '.auth_url' | sed 's/"//g')/v3
        export OS_AUTH_VERSION=3
        export OS_IDENTITY_API_VERSION=3

        # install swift client
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install -y python-dev
        sudo pip install --upgrade python-swiftclient
        sudo pip install --upgrade python-keystoneclient

        # upload image folder to swift container
        swift post ${objstorage_container}
        swift upload --changed --skip-identical ${objstorage_container} image
        swift list ${objstorage_container}

        # create auto-scaling service
        cf create-service Auto-Scaling free cloudnative-autoscale

        # create app
        cf push "${CF_APP}" -n "${CF_APP}" -d "${APP_DOMAIN}" --no-start

        # create route
        cf domains | grep ${ROUTE_DOMAIN_BFF_WEB}
        [ $? -eq 0 ] && echo "Domain exists" || cf create-domain ${CF_ORG} ${ROUTE_DOMAIN_BFF_WEB}
        cf map-route ${CF_APP} ${ROUTE_DOMAIN_BFF_WEB} --hostname ${ROUTE_HOSTNAME_BFF_WEB}

        cf bind-service "${CF_APP}" "${objstorage_svc}"
        cf set-env "${CF_APP}" NEW_RELIC_LICENSE_KEY "${NEW_RELIC_LICENSE}"
        cf set-env "${CF_APP}" NEW_RELIC_APP_NAME "${CF_APP}"
        cf start "${CF_APP}"

        # add app to CMDB
        curl "http://cmdbdevops.mybluemix.net/add?appname=${CF_APP}&apptype=cf_app&regionname=${REGION}&envname=${CF_SPACE}"

- name: VALIDATE US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Build BlueCompute Webapp
  triggers:
  - type: stage
  properties:
  - name: test_env
    value: cloud
    type: text
  - name: appname
    value: ${NAME_US}
    type: text
  - name: domainname
    value: ${DOMAIN_US}
    type: text
  jobs:
  - name: Contract Validation
    type: tester
    script: |-
      #!/bin/bash
      # invoke tests here
      mkdir tests
      touch tests/TEST-MochaResults.xml
      npm install
      ls node_modules/mocha/bin
      echo "Start running the test"
      node_modules/mocha/bin/mocha -R xunit test/storeapp-test.js > tests/TEST-MochaResults.xml
    enable_tests: true
    test_file_pattern: tests/TEST-*.xml

- name: BUILD London
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  jobs:
  - name: Build BlueCompute Webapp
    type: builder
    working_dir: StoreWebApp
    artifact_dir: ''
    build_type: npm
    script: |-
      #!/bin/bash
      # The default Node.js version is 0.10.40
      # To use Node.js 0.12.7, uncomment the following line:
      export PATH=/opt/IBM/node-v0.12/bin:$PATH
      # To use Node.js 4.2.2, uncomment the following line:
      #export PATH=/opt/IBM/node-v4.2/bin:$PATH
      npm install newrelic --save
      cp node_modules/newrelic/newrelic.js ./
      npm install

- name: DEPLOY London
  inputs:
  - type: job
    stage: BUILD London
    job: Build BlueCompute Webapp
  triggers:
  - type: stage
  properties:
  - name: REGION
    value: ${REGION_EU}
    type: text
  - name: APP_DOMAIN
    value: ${DOMAIN_EU}
    type: text
  - name: ROUTE_HOSTNAME_BFF_WEB
    value: ${ROUTE_HOSTNAME_BFF_WEB}
    type: text
  - name: ROUTE_DOMAIN_BFF_WEB
    value: ${ROUTE_DOMAIN_BFF_WEB}
    type: text
  - name: NEW_RELIC_LICENSE
    value: ${NEW_RELIC_LICENSE}
    type: text
  jobs:
  - name: Deploy BlueCompute Webapp
    type: deployer
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
      application: ${NAME_EU}
    script: |
        #!/bin/bash
        set -x
        objstorage_container="bluecompute"

        # download jq
        if [ ! -f ./jq ]; then
           wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
           mv jq-linux64 jq
           chmod u+x jq
        fi

        # create objectstorage service and key
        cf services | grep Object-Storage
        if [ $? -eq 1 ]; then
            cf cs Object-Storage Free cloudnative-objstore
            for i in {1..5}
            do
                status=$(cf service "${objstorage_svc}"|grep -i 'status:'|awk '{print $NF}')
                case $status in
                    "progress") sleep 10;;
                    "succeeded") break;;
                    *) sleep 10;;
                 esac
            done
        fi
        objstorage_svc=$(cf services | grep Object-Storage | sed "s/\(.*\)\(Object-Storage\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        cf service-keys "${objstorage_svc}" | grep "No service key for service instance"
        [ $? -eq 0 ] && cf csk "${objstorage_svc}" "${objstorage_svc}-admin1"
        objstorage_key_name=$(cf service-keys "${objstorage_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        objstorage_keys=$(cf service-key "${objstorage_svc}" "${objstorage_key_name}" | grep -v "Getting key ")

        # set env for swift client
        export OS_REGION_NAME=$(echo "${objstorage_keys}" | ./jq '.region' | sed 's/"//g')
        export OS_PROJECT_ID=$(echo "${objstorage_keys}" | ./jq '.projectId' | sed 's/"//g')
        export OS_USER_ID=$(echo "${objstorage_keys}" | ./jq '.userId' | sed 's/"//g')
        export OS_PASSWORD=$(echo "${objstorage_keys}" | ./jq '.password' | sed 's/"//g')
        export OS_AUTH_URL=$(echo "${objstorage_keys}" | ./jq '.auth_url' | sed 's/"//g')/v3
        export OS_AUTH_VERSION=3
        export OS_IDENTITY_API_VERSION=3

        # install swift client
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install -y python-dev
        sudo pip install --upgrade python-swiftclient
        sudo pip install --upgrade python-keystoneclient

        # upload image folder to swift container
        swift post ${objstorage_container}
        swift upload --changed --skip-identical ${objstorage_container} image
        swift list ${objstorage_container}

        # create auto-scaling service
        cf create-service Auto-Scaling free cloudnative-autoscale

        # create app
        cf push "${CF_APP}" -n "${CF_APP}" -d "${APP_DOMAIN}" --no-start

        # create route
        cf domains | grep ${ROUTE_DOMAIN_BFF_WEB}
        [ $? -eq 0 ] && echo "Domain exists" || cf create-domain ${CF_ORG} ${ROUTE_DOMAIN_BFF_WEB}
        cf map-route ${CF_APP} ${ROUTE_DOMAIN_BFF_WEB} --hostname ${ROUTE_HOSTNAME_BFF_WEB}

        cf bind-service "${CF_APP}" "${objstorage_svc}"
        cf set-env "${CF_APP}" NEW_RELIC_LICENSE_KEY "${NEW_RELIC_LICENSE}"
        cf set-env "${CF_APP}" NEW_RELIC_APP_NAME "${CF_APP}"
        cf start "${CF_APP}"

        # add app to CMDB
        curl "http://cmdbdevops.mybluemix.net/add?appname=${CF_APP}&apptype=cf_app&regionname=${REGION}&envname=${CF_SPACE}"

- name: VALIDATE London
  inputs:
  - type: job
    stage: BUILD London
    job: Build BlueCompute Webapp
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: test_env
    value: cloud
    type: text
  - name: appname
    value: ${NAME_EU}
    type: text
  - name: domainname
    value: ${DOMAIN_EU}
    type: text
  jobs:
  - name: Contract Validation
    type: tester
    script: |-
      #!/bin/bash
      # invoke tests here
      mkdir tests
      touch tests/TEST-MochaResults.xml
      npm install
      ls node_modules/mocha/bin
      echo "Start running the test"
      node_modules/mocha/bin/mocha -R xunit test/storeapp-test.js > tests/TEST-MochaResults.xml
    enable_tests: true
    test_file_pattern: tests/TEST-*.xml
