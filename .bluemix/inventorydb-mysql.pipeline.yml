---
stages:
- name: BUILD
  inputs:
  - service: ${REPO}
    type: git
    branch: master
  triggers:
  - type: commit
  jobs:
  - name: Register MySQL Container Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${NAME}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
        #!/bin/bash
        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"

        # Build Container via Dockerfile     #
        SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/"
        )
        IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
        REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

        if [ -f Dockerfile ]; then
            log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
            ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
            # build image
            BUILD_COMMAND=""
            if [ "${USE_CACHED_LAYERS}" == "true" ]; then
                BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            else
                BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            fi

            if [ $RESULT -ne 0 ]; then
                log_and_echo "$ERROR" "Error building image"
                ice_retry info
                ice_retry images
                ${EXT_DIR}/print_help.sh
                ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
                exit 1
            else
                log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
                ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
            fi
        else
            log_and_echo "$ERROR" "Dockerfile not found in project"
            ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
            exit 1
        fi

        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
- name: DEPLOY
  inputs:
  - type: job
    stage: BUILD
    job: Register MySQL Container Image
  properties:
  - name: MEMORY
    value: ${MEMORY}
    type: text
  - name: MYSQL_DATABASE
    value: ${DBNAME}
    type: text
  - name: MYSQL_USER
    value: ${DBUSER}
    type: text
  - name: MYSQL_PASSWORD
    value: ${DBPASS}
    type: text
  - name: MYSQL_ROOT_PASSWORD
    value: ${DBAPASS}
    type: text
  triggers:
  - type: stage
  jobs:
  - name: Deploy MySQL Container
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    OPTIONAL_ARGS: -m ${MEMORY} -e MYSQL_DATABASE=${MYSQL_DATABASE} -e MYSQL_USER=${MYSQL_USER} -e MYSQL_PASSWORD=${MYSQL_PASSWORD} -e MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    CONTAINER_NAME: ${NAME}
    DEPLOY_TYPE: simple
    COMMAND: |-
        #!/bin/sh -e

        rename_container() {
            log_and_echo "Found container:${CONTAINER_NAME} in ${CF_ORG}/${CF_SPACE}. Renaming container..."
            ${IC_COMMAND} rename ${CONTAINER_NAME} ${CONTAINER_NAME}_${BUILD_NUMBER}_renamed
            log_and_echo "Container ${CONTAINER_NAME} renamed to ${CONTAINER_NAME}_${BUILD_NUMBER}_renamed"
        }

        create_container() {
            log_and_echo "command: ${IC_COMMAND} run --name ${CONTAINER_NAME} -p $PORT:$PORT ${OPTIONAL_ARGS}"
            ${IC_COMMAND} run --name ${CONTAINER_NAME} -p $PORT:$PORT ${OPTIONAL_ARGS} -d ${IMAGE_NAME}

            COUNTER=0
            STATE="unknown"
            while [[ ( $COUNTER -lt 25 ) && ("${STATE}" != "Running") && ("${STATE}" != "Crashed") ]]; do
                let COUNTER=COUNTER+1
                STATE=$(${IC_COMMAND} inspect ${CONTAINER_NAME} 2>/dev/null |grep "Status"|awk '{print $2}'|sed 's/"//g')
                if [ -z "${STATE}" ]; then
                    STATE="waiting for container to start..."
                fi
                log_and_echo "${CONTAINER_NAME} Status: ${STATE}"
                sleep 8
            done
            if [ "$STATE" == "Running" ]; then
                log_and_echo "${CONTAINER_NAME} container is now running."
            elif [ "$STATE" != "Running" ]; then
                log_and_echo "$ERROR" "${CONTAINER_NAME} container failed to start"
                exit 1
            elif [ "$STATE" == "Crashed" ]; then
                log_and_echo "$ERROR" "${CONTAINER_NAME} container crashed"
                exit 1
            fi
            ${IC_COMMAND} exec -it ${CONTAINER_NAME} sh load-data.sh
        }

        log_and_echo "command: ${IC_COMMAND} ps -a|awk {'print $NF'}|grep -wq ${CONTAINER_NAME}"
        ${IC_COMMAND} ps -a|awk {'print $NF'}|grep -wq ${CONTAINER_NAME} && rename_container
        create_container
        echo "inventorydb created in mysql container. Done!"
        exit 0
