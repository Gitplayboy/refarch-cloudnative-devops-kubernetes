---
stages:
- name: BUILD US-South
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  jobs:
  - name: Build and Register Inventory Microservice Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${NAME_US}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
        #!/bin/bash

        log_and_echo "Run gradle build..."
        export JAVA_HOME=~/java8
        export PATH=$JAVA_HOME/bin:$PATH
        ./gradlew build
        ./gradlew docker
        ls -al docker
        cp -R docker/* .
        ls -al $PWD
        echo "Gradle build complete."

        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"

        # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
        #####################
        # Run unit tests    #
        #####################
        log_and_echo "$LABEL" "No unit tests cases have been checked in"

        ######################################
        # Build Container via Dockerfile     #
        ######################################
        SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/"
        )
        IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
        REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

        if [ -f Dockerfile ]; then
            log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
            ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
            # build image
            BUILD_COMMAND=""
            if [ "${USE_CACHED_LAYERS}" == "true" ]; then
                BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            else
                BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            fi

            if [ $RESULT -ne 0 ]; then
                log_and_echo "$ERROR" "Error building image"
                ice_retry info
                ice_retry images
                ${EXT_DIR}/print_help.sh
                ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
                exit 1
            else
                log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
                ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
            fi
        else
            log_and_echo "$ERROR" "Dockerfile not found in project"
            ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
            exit 1
        fi

        ######################################################################################
        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        ######################################################################################
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
        cp -R validate $ARCHIVE_DIR

  - name: Build and Register MySQL Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${MYSQL_CONTAINER_US}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
        #!/bin/bash
        cd mysql
        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"

        # Build Container via Dockerfile     #
        SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/"
        )
        IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
        REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.
        ls -al
        if [ -f Dockerfile ]; then
            log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
            ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
            # build image
            BUILD_COMMAND=""
            if [ "${USE_CACHED_LAYERS}" == "true" ]; then
                BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/mysql"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            else
                BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/mysql"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            fi

            if [ $RESULT -ne 0 ]; then
                log_and_echo "$ERROR" "Error building image"
                ice_retry info
                ice_retry images
                ${EXT_DIR}/print_help.sh
                ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
                exit 1
            else
                log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
                ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
            fi
        else
            log_and_echo "$ERROR" "Dockerfile not found in project"
            ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
            exit 1
        fi

        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties

- name: SCAN Image US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Build and Register Inventory Microservice Image
  jobs:
  - name: Vulnerability Scan Inventory Microservice Image
    type: tester
    extension_id: ibm.devops.services.pipeline.crawler.tester
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    WAIT_TIME: '10'

- name: DEPLOY MySQL US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Build and Register MySQL Image
  triggers:
  - type: stage
  properties:
  - name: MYSQL_CONTAINER
    value: ${MYSQL_CONTAINER_US}
    type: text
  - name: MYSQL_MEMORY
    value: '128'
    type: text
  - name: MYSQL_DATABASE
    value: ${MYSQL_DATABASE}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    value: ${MYSQL_PASSWORD}
    type: secure
  jobs:
  - name: Deploy MySQL Container
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${MYSQL_PORT}
    OPTIONAL_ARGS: -m ${MYSQL_MEMORY} -e MYSQL_DATABASE=${MYSQL_DATABASE} -e MYSQL_USER=${MYSQL_USER} -e MYSQL_PASSWORD=${MYSQL_PASSWORD} -e MYSQL_ALLOW_EMPTY_PASSWORD=true
    DEPLOY_TYPE: red_black
    CONTAINER_NAME: ${MYSQL_CONTAINER}
    COMMAND: |-
        #!/bin/bash

        debugme() {
          [[ $DEBUG = 1 ]] && "$@" || :
        }

        # function to wait for a container to start
        # takes a container name as the only parameter
        wait_for (){
            local WAITING_FOR=$1
            if [ -z ${WAITING_FOR} ]; then
                log_and_echo "$ERROR" "Expected container name to be passed into wait_for"
                return 1
            fi
            local COUNTER=0
            local STATE="unknown"
            while [[ ( $COUNTER -lt 180 ) && ("${STATE}" != "Running") && ("${STATE}" != "Crashed") ]]; do
                let COUNTER=COUNTER+1
                STATE=$($IC_COMMAND inspect $WAITING_FOR 2> /dev/null | grep "Status" | awk '{print $2}' | sed 's/"//g')
                if [ -z "${STATE}" ]; then
                    STATE="being placed"
                fi
                log_and_echo "${WAITING_FOR} is ${STATE}"
                sleep 3
            done
            if [ "$STATE" == "Crashed" ]; then
                return 2
            fi
            if [ "$STATE" != "Running" ]; then
                log_and_echo "$ERROR" "Failed to start instance "
                return 1
            fi
            return 0
        }

        # function to wait for a container to be deleted
        # takes a container name as the only parameter
        wait_for_deleted (){
            local WAITING_FOR=$1
            if [ -z ${WAITING_FOR} ]; then
                log_and_echo "$ERROR" "Expected container name to be passed into wait_for"
                return 1
            fi
            local COUNTER=0
            local FOUND=0
            while [[ ( $COUNTER -lt 60 ) && ("${STATE}" != "Shutdown")  ]]; do
                let COUNTER=COUNTER+1
                ice_retry inspect ${CONTAINER_NAME} 2>/dev/null
                RESULT=$?
                if [ ${RESULT} -ne 0 ]; then
                    STATE="being deleted"
                else
                    STATE="deleted"
                    break
                fi
                sleep 2
            done
            if [ "$STATE" != "deleted" ]; then
                log_and_echo "$ERROR" "Failed to stop instance $WAITING_FOR "
                return 1
            else
                log_and_echo "Successfully stopped $WAITING_FOR"
            fi
            return 0
        }

        log_and_echo "deploying container ${CONTAINER_NAME}"

        # check to see if that container name is already in use
        ice_retry_save_output ps -a 2> /dev/null

        CONTAINER_NAME_ARRAY=$(grep ${CONTAINER_NAME} iceretry.log | awk '{print $2}')
        if [ -n "${CONTAINER_NAME_ARRAY}" ]; then
            log_and_echo "removing container: ${CONTAINER_NAME}"
            ice_retry rm -f ${CONTAINER_NAME}
            wait_for_deleted ${CONTAINER_NAME}
        fi

        # run the container and check the results
        log_and_echo "run the container: $IC_COMMAND run --name ${CONTAINER_NAME} -p ${PORT}:${PORT} ${MEMORY} ${OPTIONAL_ARGS} ${IMAGE_NAME} "
        ice_retry run --name ${CONTAINER_NAME} -p ${PORT}:${PORT} ${OPTIONAL_ARGS} ${IMAGE_NAME} 2> /dev/null
        RESULT=$?
        if [ $RESULT -ne 0 ]; then
            log_and_echo "$ERROR" "Failed to deploy ${CONTAINER_NAME} using ${IMAGE_NAME}"
            dump_info
            return 1
        fi

        # wait for container to start
        wait_for ${CONTAINER_NAME}
        RESULT=$?
        if [ $RESULT -eq 0 ]; then
           /bin/sleep 10
            ${IC_COMMAND} exec -it ${CONTAINER_NAME} sh load-data.sh
            echo "inventorydb created in mysql container. Done!"
            exit 0
        fi

- name: DEPLOY Standalone Inventory Microservice US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${NAME_US}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_US}
    type: text
  - name: MYSQL_CONTAINER
    value: ${MYSQL_CONTAINER_US}
    type: text
  - name: INVENTORY_MSNAME
    value: ${NAME_US}
    type: text
  - name: CTXPATH
    value: ${CTXPATH}
    type: text
  - name: CONTAINER_SIZE
    value: '128'
    type: text
  - name: MEMORY
    value: '128'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '1'
    type: text
  - name: DESIRED_INSTANCES
    value: '1'
    type: text
  - name: MYSQL_DATABASE
    value: ${MYSQL_DATABASE}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    value: ${MYSQL_PASSWORD}
    type: secure
  jobs:
  - name: Deploy Standalone Inventory Microservice
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    DEPLOY_TYPE: red_black
    CONTAINER_NAME: ${NAME_US}
    COMMAND: |-
        #!/bin/bash
        # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
        echo -e "${label_color}Starting deployment script${no_color}"

        # To view/fork this script goto: https://github.com/Osthanes/deployscripts
        # git_retry will retry git calls to prevent pipeline failure on temporary github problems
        # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
        git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts

        # get MYSQL information
        log_and_echo "MySQL Container: ${MYSQL_CONTAINER}"
        $IC_COMMAND inspect $MYSQL_CONTAINER|grep -E 'MYSQL|HostIp|HostPort'|sed 's/["|,|\" \"]//g'|sed 's/:/=/g' > mysql.env
        . mysql.env
        OPTIONAL_ARGS="${OPTIONAL_ARGS} -e CG_NAME=${ROUTE_HOSTNAME} -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} -e eureka.client.fetchRegistry=false -e eureka.client.registerWithEureka=false -e "spring.application.name=${INVENTORY_MSNAME}" -e "server.context-path=${CTXPATH}" -e "spring.datasource.url=jdbc:mysql://${HostIp}:${HostPort}/${MYSQL_DATABASE}" -e "spring.datasource.username=${MYSQL_USER}" -e "spring.datasource.password=${MYSQL_PASSWORD}""
        log_and_echo "Optional Args: ${OPTIONAL_ARGS}"

        export VALIDATE_ROUTE=1

        # You can deploy your Image as either a single Container or as a Container
        # Group.  A Container Group deploys a number of containers to enhance
        # scalability or reliability.  By default we will deploy as a single
        # container.  To switch to a group deploy, comment out the line below
        # containing deploycontainer.sh and uncomment the line for deploygroup.sh

        # Deploy with containers:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============      =========     ==============
        #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                                            large (4096), x-large (8192), 2x-large (16384).
        #                                    Default is micro (256).
        #   CONCURRENT_VERSIONS Number       Number of versions of this container to leave active.
        #                                    Default is 1
        #
        #/bin/bash deployscripts/deploycontainer.sh

        # Deploy Container Group:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============      =========     ==============
        #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   ROUTE_DOMAIN        String       Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   DESIRED_INSTANCES:  Number       Specify the number of instances in the group.  Default value is 1.
        #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default value is false.

        #                                    Default is false.
        #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                                            large (4096), x-large (8192), 2x-large (16384).
        #                                    Default is micro (256).
        #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
        #                                    Default is 1
        # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
        /bin/bash deployscripts/deploygroup.sh

        RESULT=$?

        # source the deploy property file
        if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
          source "$DEPLOY_PROPERTY_FILE"
        fi

        #########################
        # Environment DETAILS   #
        #########################
        # The environment has been setup.
        # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        if [ $RESULT -ne 0 ]; then
            echo -e "${red}Executed failed or had warnings ${no_color}"
            ${EXT_DIR}/print_help.sh
            exit $RESULT
        fi
        echo -e "${green}Execution complete${no_label}"

- name: VALIDATE Standalone Inventory Microservice US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${NAME_US}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_US}
    type: text
  - name: CTXPATH
    value: ${CTXPATH}
    type: text
  jobs:
  - name: Contract Validation
    type: tester
    script: |-
      #!/bin/bash
      # invoke tests here
      pip install requests
      cd validate
      python contract_validation.py https://${ROUTE_HOSTNAME}.${ROUTE_DOMAIN}${CTXPATH}

- name: CLEAN US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${NAME_US}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_US}
    type: text
  - name: MYSQL_CONTAINER
    value: ${MYSQL_CONTAINER_US}
    type: text
  - name: JDBC_URL
    value: ${ONPREM_MYSQL_JDBC_URL_US}
    type: text
  jobs:
  - name: Clean Standalone Inventory Microservice
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    DEPLOY_TYPE: clean
    CONTAINER_NAME: ${NAME_US}
    COMMAND: |-
      #!/bin/bash

      # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
      echo -e "${label_color}Starting deployment script${no_color}"

      debugme() {
        [[ $DEBUG = 1 ]] && "$@" || :
      }

      ice_retry_save_output group list
      RESULT=$?
      if [ $RESULT -eq 0 ]; then
          GROUP_NAME_ARRAY=$(awk 'NR>=2 {print $2}' iceretry.log | grep ${CONTAINER_NAME})
      fi

      # loop through the array of the group name and check which one it need to keep
      for groupName in ${GROUP_NAME_ARRAY[@]}
      do
          # unmap router and remove the group
          log_and_echo "removing route $host $ROUTE_DOMAIN from ${groupName}"
          ice_retry route unmap --hostname ${ROUTE_HOSTNAME} --domain $ROUTE_DOMAIN ${groupName}
          RESULT=$?
          if [ $RESULT -ne 0 ]; then
              log_and_echo "$WARN" "'$IC_COMMAND route unmap --hostname ${ROUTE_HOSTNAME} --domain $ROUTE_DOMAIN ${groupName}' command failed with return code ${RESULT}"
          fi
          sleep 2

          log_and_echo "removing group ${groupName}"
          ice_retry group rm ${groupName}
          RESULT=$?
          if [ $RESULT -ne 0 ]; then
              log_and_echo "$WARN" "'$IC_COMMAND group rm ${groupName}' command failed with return code ${RESULT}"
              log_and_echo "$WARN" "Cleaning up previous deployments is not completed"
              return 0
          fi

      done

      # source the deploy property file
      if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
        source "$DEPLOY_PROPERTY_FILE"
      fi

      #########################
      # Environment DETAILS   #
      #########################
      # The environment has been setup.
      # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
      fi
      echo -e "${green}Execution complete${no_label}"

  - name: Clean MySQL Container
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    DEPLOY_TYPE: clean
    CONTAINER_NAME: ${MYSQL_CONTAINER}
    COMMAND: |-
        #!/bin/bash
        set -x
        debugme() {
          [[ $DEBUG = 1 ]] && "$@" || :
        }

        ice_retry_save_output ps -a 2> /dev/null

        CONTAINER_NAME_ARRAY=$(grep ${CONTAINER_NAME} iceretry.log | awk '{print $2}')

        if [ -n "${CONTAINER_NAME_ARRAY}" ]; then

          ice_retry rm -f ${CONTAINER_NAME} 2> /dev/null
          RESULT=$?
          if [ $RESULT -ne 0 ]; then
              log_and_echo "$WARN" "'$IC_COMMAND rm -f ${CONTAINER_NAME}' command failed with return code ${RESULT}"
              log_and_echo "$WARN" "Cleaning up previous deployments is not completed"
              return 0
          fi
        fi

- name: DEPLOY Hybrid Inventory Microservice US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: IGNORE_MAPPING_ROUTE
    value: 'true'
    type: text
  - name: ROUTE_HOSTNAME
    value: ${NAME_US}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_US}
    type: text
  - name: MYSQL_CONTAINER
    value: ${MYSQL_CONTAINER_US}
    type: text
  - name: EUREKA_REGISTRY_URL
    value: ${EUREKA_REGISTRY_URL_US}
    type: text
  - name: AUTO_RECOVERY
    value: 'true'
    type: text
  - name: MEMORY
    value: '128'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '3'
    type: text
  - name: DESIRED_INSTANCES
    value: '2'
    type: text
  - name: INVENTORY_MSNAME
    value: ${INVENTORY_MSNAME}
    type: text
  - name: CTXPATH
    value: ${CTXPATH}
    type: text
  - name: NEW_RELIC_LICENSE_KEY
    value: ${NEW_RELIC_LICENSE}
    type: text
  - name: JDBC_URL
    value: ${ONPREM_MYSQL_JDBC_URL_US}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    type: secure
    value: ${MYSQL_PASSWORD}
  jobs:
  - name: Deploy Inventory Microservice Container Group
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    PORT: '8080'
    OPTIONAL_ARGS: -m ${MEMORY}
    CONTAINER_NAME: ${NAME_US}
    DEPLOY_TYPE: red_black
    COMMAND: |-
      #!/bin/sh

      # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
      echo -e "${label_color}Starting deployment script${no_color}"

      # To view/fork this script goto: https://github.com/Osthanes/deployscripts
      # git_retry will retry git calls to prevent pipeline failure on temporary github problems
      # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
      git_retry clone https://github.com/ssibm/deployscripts.git deployscripts

      OPTIONAL_ARGS="${OPTIONAL_ARGS} -e CG_NAME=${ROUTE_HOSTNAME} -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} -e eureka.client.fetchRegistry=true -e eureka.client.registerWithEureka=true -e "spring.application.name=${INVENTORY_MSNAME}" -e "server.context-path=${CTXPATH}" -e "eureka.client.serviceUrl.defaultZone=${EUREKA_REGISTRY_URL}" -e "spring.datasource.url=${JDBC_URL}" -e "spring.datasource.username=${MYSQL_USER}" -e "spring.datasource.password=${MYSQL_PASSWORD}""
      log_and_echo "Optional Args: ${OPTIONAL_ARGS}"

      # Deploy Container Group:
      # Optional environment properties (can be set directly in this script, or defined as environment properties):
      #      NAME              Value         Description
      #   =============      =========     ==============
      #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   ROUTE_DOMAIN        String       Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
      #   DESIRED_INSTANCES:  Number       Specify the number of instances in the group.  Default value is 1.
      #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default value is false.

      #                                    Default is false.
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
      #                                                            large (4096), x-large (8192), 2x-large (16384).
      #                                    Default is micro (256).
      #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
      #                                    Default is 1
      # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
      /bin/bash deployscripts/deploygroup.sh

      RESULT=$?

      # source the deploy property file
      if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
        source "$DEPLOY_PROPERTY_FILE"
      fi

      #########################
      # Environment DETAILS   #
      #########################
      # The environment has been setup.
      # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
      fi
      echo -e "${green}Execution complete${no_label}"

- name: BUILD London
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  jobs:
  - name: Build and Register Inventory Microservice Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${NAME_EU}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
        #!/bin/bash

        log_and_echo "Run gradle build..."
        export JAVA_HOME=~/java8
        export PATH=$JAVA_HOME/bin:$PATH
        ./gradlew build
        ./gradlew docker
        ls -al docker
        cp -R docker/* .
        ls -al $PWD
        echo "Gradle build complete."

        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"

        # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
        #####################
        # Run unit tests    #
        #####################
        log_and_echo "$LABEL" "No unit tests cases have been checked in"

        ######################################
        # Build Container via Dockerfile     #
        ######################################
        SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/"
        )
        IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
        REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

        if [ -f Dockerfile ]; then
            log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
            ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
            # build image
            BUILD_COMMAND=""
            if [ "${USE_CACHED_LAYERS}" == "true" ]; then
                BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            else
                BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            fi

            if [ $RESULT -ne 0 ]; then
                log_and_echo "$ERROR" "Error building image"
                ice_retry info
                ice_retry images
                ${EXT_DIR}/print_help.sh
                ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
                exit 1
            else
                log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
                ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
            fi
        else
            log_and_echo "$ERROR" "Dockerfile not found in project"
            ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
            exit 1
        fi

        ######################################################################################
        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        ######################################################################################
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
        cp -R validate $ARCHIVE_DIR

  - name: Build and Register MySQL Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${MYSQL_CONTAINER_EU}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
        #!/bin/bash
        cd mysql
        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"

        # Build Container via Dockerfile     #
        SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/"
        )
        IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
        REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

        if [ -f Dockerfile ]; then
            log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
            ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
            # build image
            BUILD_COMMAND=""
            if [ "${USE_CACHED_LAYERS}" == "true" ]; then
                BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/mysql"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            else
                BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/mysql"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            fi

            if [ $RESULT -ne 0 ]; then
                log_and_echo "$ERROR" "Error building image"
                ice_retry info
                ice_retry images
                ${EXT_DIR}/print_help.sh
                ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
                exit 1
            else
                log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
                ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
            fi
        else
            log_and_echo "$ERROR" "Dockerfile not found in project"
            ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
            exit 1
        fi

        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties

- name: SCAN Image London
  inputs:
  - type: job
    stage: BUILD London
    job: Build and Register Inventory Microservice Image
  jobs:
  - name: Vulnerability Scan Inventory Microservice Image
    type: tester
    extension_id: ibm.devops.services.pipeline.crawler.tester
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    WAIT_TIME: '10'

- name: DEPLOY MySQL London
  inputs:
  - type: job
    stage: BUILD London
    job: Build and Register MySQL Image
  triggers:
  - type: stage
  properties:
  - name: MYSQL_CONTAINER
    value: ${MYSQL_CONTAINER_EU}
    type: text
  - name: MYSQL_MEMORY
    value: '128'
    type: text
  - name: MYSQL_DATABASE
    value: ${MYSQL_DATABASE}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    value: ${MYSQL_PASSWORD}
    type: secure
  jobs:
  - name: Deploy MySQL Container
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${MYSQL_PORT}
    OPTIONAL_ARGS: -m ${MYSQL_MEMORY} -e MYSQL_DATABASE=${MYSQL_DATABASE} -e MYSQL_USER=${MYSQL_USER} -e MYSQL_PASSWORD=${MYSQL_PASSWORD} -e MYSQL_ALLOW_EMPTY_PASSWORD=true
    DEPLOY_TYPE: red_black
    CONTAINER_NAME: ${MYSQL_CONTAINER}
    COMMAND: |-
        #!/bin/bash

        debugme() {
          [[ $DEBUG = 1 ]] && "$@" || :
        }

        # Build Container via Dockerfile
        # function to wait for a container to start
        # takes a container name as the only parameter
        wait_for (){
            local WAITING_FOR=$1
            if [ -z ${WAITING_FOR} ]; then
                log_and_echo "$ERROR" "Expected container name to be passed into wait_for"
                return 1
            fi
            local COUNTER=0
            local STATE="unknown"
            while [[ ( $COUNTER -lt 180 ) && ("${STATE}" != "Running") && ("${STATE}" != "Crashed") ]]; do
                let COUNTER=COUNTER+1
                STATE=$($IC_COMMAND inspect $WAITING_FOR 2> /dev/null | grep "Status" | awk '{print $2}' | sed 's/"//g')
                if [ -z "${STATE}" ]; then
                    STATE="being placed"
                fi
                log_and_echo "${WAITING_FOR} is ${STATE}"
                sleep 3
            done
            if [ "$STATE" == "Crashed" ]; then
                return 2
            fi
            if [ "$STATE" != "Running" ]; then
                log_and_echo "$ERROR" "Failed to start instance "
                return 1
            fi
            return 0
        }

        # function to wait for a container to be deleted
        # takes a container name as the only parameter
        wait_for_deleted (){
            local WAITING_FOR=$1
            if [ -z ${WAITING_FOR} ]; then
                log_and_echo "$ERROR" "Expected container name to be passed into wait_for"
                return 1
            fi
            local COUNTER=0
            local FOUND=0
            while [[ ( $COUNTER -lt 60 ) && ("${STATE}" != "Shutdown")  ]]; do
                let COUNTER=COUNTER+1
                ice_retry inspect ${CONTAINER_NAME} 2>/dev/null
                RESULT=$?
                if [ ${RESULT} -ne 0 ]; then
                    STATE="being deleted"
                else
                    STATE="deleted"
                    break
                fi
                sleep 2
            done
            if [ "$STATE" != "deleted" ]; then
                log_and_echo "$ERROR" "Failed to stop instance $WAITING_FOR "
                return 1
            else
                log_and_echo "Successfully stopped $WAITING_FOR"
            fi
            return 0
        }

        log_and_echo "deploying container ${CONTAINER_NAME}"

        # check to see if that container name is already in use
        ice_retry_save_output ps -a 2> /dev/null

        CONTAINER_NAME_ARRAY=$(grep ${CONTAINER_NAME} iceretry.log | awk '{print $2}')
        if [ -n "${CONTAINER_NAME_ARRAY}" ]; then
            log_and_echo "removing container: ${CONTAINER_NAME}"
            ice_retry rm -f ${CONTAINER_NAME}
            wait_for_deleted ${CONTAINER_NAME}
        fi

        # run the container and check the results
        log_and_echo "run the container: $IC_COMMAND run --name ${CONTAINER_NAME} -p ${PORT}:${PORT} ${MEMORY} ${OPTIONAL_ARGS} ${IMAGE_NAME} "
        ice_retry run --name ${CONTAINER_NAME} -p ${PORT}:${PORT} ${OPTIONAL_ARGS} ${IMAGE_NAME} 2> /dev/null
        RESULT=$?
        if [ $RESULT -ne 0 ]; then
            log_and_echo "$ERROR" "Failed to deploy ${CONTAINER_NAME} using ${IMAGE_NAME}"
            dump_info
            return 1
        fi

        # wait for container to start
        wait_for ${CONTAINER_NAME}
        RESULT=$?
        if [ $RESULT -eq 0 ]; then
           /bin/sleep 10
            ${IC_COMMAND} exec -it ${CONTAINER_NAME} sh load-data.sh
            echo "inventorydb created in mysql container. Done!"
            exit 0
        fi

- name: DEPLOY Standalone Inventory Microservice London
  inputs:
  - type: job
    stage: BUILD London
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${NAME_EU}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_EU}
    type: text
  - name: MYSQL_CONTAINER
    value: ${MYSQL_CONTAINER_EU}
    type: text
  - name: INVENTORY_MSNAME
    value: ${NAME_EU}
    type: text
  - name: CTXPATH
    value: ${CTXPATH}
    type: text
  - name: CONTAINER_SIZE
    value: '128'
    type: text
  - name: MEMORY
    value: '128'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '1'
    type: text
  - name: DESIRED_INSTANCES
    value: '1'
    type: text
  - name: MYSQL_DATABASE
    value: ${MYSQL_DATABASE}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    value: ${MYSQL_PASSWORD}
    type: secure
  jobs:
  - name: Deploy Standalone Inventory Microservice
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    DEPLOY_TYPE: red_black
    CONTAINER_NAME: ${NAME_EU}
    COMMAND: |-
        #!/bin/bash
        # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
        echo -e "${label_color}Starting deployment script${no_color}"

        # To view/fork this script goto: https://github.com/Osthanes/deployscripts
        # git_retry will retry git calls to prevent pipeline failure on temporary github problems
        # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
        git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts

        # get MYSQL information
        log_and_echo "MySQL Container: ${MYSQL_CONTAINER}"
        $IC_COMMAND inspect $MYSQL_CONTAINER|grep -E 'MYSQL|HostIp|HostPort'|sed 's/["|,|\" \"]//g'|sed 's/:/=/g' > mysql.env
        . mysql.env
        OPTIONAL_ARGS="${OPTIONAL_ARGS} -e CG_NAME=${ROUTE_HOSTNAME} -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} -e eureka.client.fetchRegistry=false -e eureka.client.registerWithEureka=false -e "spring.application.name=${INVENTORY_MSNAME}" -e "server.context-path=${CTXPATH}" -e "spring.datasource.url=jdbc:mysql://${HostIp}:${HostPort}/${MYSQL_DATABASE}" -e "spring.datasource.username=${MYSQL_USER}" -e "spring.datasource.password=${MYSQL_PASSWORD}""
        log_and_echo "Optional Args: ${OPTIONAL_ARGS}"

        export VALIDATE_ROUTE=1

        # You can deploy your Image as either a single Container or as a Container
        # Group.  A Container Group deploys a number of containers to enhance
        # scalability or reliability.  By default we will deploy as a single
        # container.  To switch to a group deploy, comment out the line below
        # containing deploycontainer.sh and uncomment the line for deploygroup.sh

        # Deploy with containers:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============      =========     ==============
        #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                                            large (4096), x-large (8192), 2x-large (16384).
        #                                    Default is micro (256).
        #   CONCURRENT_VERSIONS Number       Number of versions of this container to leave active.
        #                                    Default is 1
        #
        #/bin/bash deployscripts/deploycontainer.sh

        # Deploy Container Group:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============      =========     ==============
        #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   ROUTE_DOMAIN        String       Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   DESIRED_INSTANCES:  Number       Specify the number of instances in the group.  Default value is 1.
        #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default value is false.

        #                                    Default is false.
        #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                                            large (4096), x-large (8192), 2x-large (16384).
        #                                    Default is micro (256).
        #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
        #                                    Default is 1
        # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
        /bin/bash deployscripts/deploygroup.sh

        RESULT=$?

        # source the deploy property file
        if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
          source "$DEPLOY_PROPERTY_FILE"
        fi

        #########################
        # Environment DETAILS   #
        #########################
        # The environment has been setup.
        # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        if [ $RESULT -ne 0 ]; then
            echo -e "${red}Executed failed or had warnings ${no_color}"
            ${EXT_DIR}/print_help.sh
            exit $RESULT
        fi
        echo -e "${green}Execution complete${no_label}"

- name: VALIDATE Standalone Inventory Microservice London
  inputs:
  - type: job
    stage: BUILD London
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${NAME_EU}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_EU}
    type: text
  - name: CTXPATH
    value: ${CTXPATH}
    type: text
  jobs:
  - name: Contract Validation
    type: tester
    script: |-
      #!/bin/bash
      # invoke tests here
      pip install requests
      cd validate
      python contract_validation.py https://${ROUTE_HOSTNAME}.${ROUTE_DOMAIN}${CTXPATH}

- name: CLEAN London
  inputs:
  - type: job
    stage: BUILD London
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${NAME_EU}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_EU}
    type: text
  - name: MYSQL_CONTAINER
    value: ${MYSQL_CONTAINER_EU}
    type: text
  - name: JDBC_URL
    value: ${ONPREM_MYSQL_JDBC_URL_EU}
    type: text
  jobs:
  - name: Clean Standalone Inventory Microservice
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    DEPLOY_TYPE: clean
    CONTAINER_NAME: ${NAME_EU}
    COMMAND: |-
      #!/bin/bash

      # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
      echo -e "${label_color}Starting deployment script${no_color}"

      debugme() {
        [[ $DEBUG = 1 ]] && "$@" || :
      }

      ice_retry_save_output group list
      RESULT=$?
      if [ $RESULT -eq 0 ]; then
          GROUP_NAME_ARRAY=$(awk 'NR>=2 {print $2}' iceretry.log | grep ${CONTAINER_NAME})
      fi

      # loop through the array of the group name and check which one it need to keep
      for groupName in ${GROUP_NAME_ARRAY[@]}
      do
          # unmap router and remove the group
          log_and_echo "removing route $host $ROUTE_DOMAIN from ${groupName}"
          ice_retry route unmap --hostname ${ROUTE_HOSTNAME} --domain $ROUTE_DOMAIN ${groupName}
          RESULT=$?
          if [ $RESULT -ne 0 ]; then
              log_and_echo "$WARN" "'$IC_COMMAND route unmap --hostname ${ROUTE_HOSTNAME} --domain $ROUTE_DOMAIN ${groupName}' command failed with return code ${RESULT}"
          fi
          sleep 2

          log_and_echo "removing group ${groupName}"
          ice_retry group rm ${groupName}
          RESULT=$?
          if [ $RESULT -ne 0 ]; then
              log_and_echo "$WARN" "'$IC_COMMAND group rm ${groupName}' command failed with return code ${RESULT}"
              log_and_echo "$WARN" "Cleaning up previous deployments is not completed"
              return 0
          fi

      done

      # source the deploy property file
      if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
        source "$DEPLOY_PROPERTY_FILE"
      fi

      #########################
      # Environment DETAILS   #
      #########################
      # The environment has been setup.
      # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
      fi
      echo -e "${green}Execution complete${no_label}"

  - name: Clean MySQL Container
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    DEPLOY_TYPE: clean
    CONTAINER_NAME: ${MYSQL_CONTAINER}
    COMMAND: |-
        #!/bin/bash
        set -x
        #CONTAINER_NAME=${CONTAINER_NAME}

        debugme() {
          [[ $DEBUG = 1 ]] && "$@" || :
        }

        ice_retry_save_output ps -a 2> /dev/null

        CONTAINER_NAME_ARRAY=$(grep ${CONTAINER_NAME} iceretry.log | awk '{print $2}')

        if [ -n "${CONTAINER_NAME_ARRAY}" ]; then

          ice_retry rm -f ${CONTAINER_NAME} 2> /dev/null
          RESULT=$?
          if [ $RESULT -ne 0 ]; then
              log_and_echo "$WARN" "'$IC_COMMAND rm -f ${CONTAINER_NAME}' command failed with return code ${RESULT}"
              log_and_echo "$WARN" "Cleaning up previous deployments is not completed"
              return 0
          fi
        fi

- name: DEPLOY Hybrid Inventory Microservice London
  inputs:
  - type: job
    stage: BUILD London
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: IGNORE_MAPPING_ROUTE
    value: 'true'
    type: text
  - name: ROUTE_HOSTNAME
    value: ${NAME_EU}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_EU}
    type: text
  - name: MYSQL_CONTAINER
    value: ${MYSQL_CONTAINER_EU}
    type: text
  - name: EUREKA_REGISTRY_URL
    value: ${EUREKA_REGISTRY_URL_EU}
    type: text
  - name: AUTO_RECOVERY
    value: 'true'
    type: text
  - name: MEMORY
    value: '128'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '3'
    type: text
  - name: DESIRED_INSTANCES
    value: '2'
    type: text
  - name: INVENTORY_MSNAME
    value: ${INVENTORY_MSNAME}
    type: text
  - name: CTXPATH
    value: ${CTXPATH}
    type: text
  - name: NEW_RELIC_LICENSE_KEY
    value: ${NEW_RELIC_LICENSE}
    type: text
  - name: JDBC_URL
    value: ${ONPREM_MYSQL_JDBC_URL_EU}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    type: secure
    value: ${MYSQL_PASSWORD}
  jobs:
  - name: Deploy Inventory Microservice Container Group
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    PORT: '8080'
    OPTIONAL_ARGS: -m ${MEMORY}
    CONTAINER_NAME: ${NAME_EU}
    DEPLOY_TYPE: red_black
    COMMAND: |-
      #!/bin/sh

      # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
      echo -e "${label_color}Starting deployment script${no_color}"

      # To view/fork this script goto: https://github.com/Osthanes/deployscripts
      # git_retry will retry git calls to prevent pipeline failure on temporary github problems
      # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
      git_retry clone https://github.com/ssibm/deployscripts.git deployscripts
      #SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed #"s/\(.*\)\((.*\)/\1/")
      #IMAGE_NAME=$(echo $CONTAINER_NAME|sed "s/-$SPACE//")
      #REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
      #IMAGE_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}

      OPTIONAL_ARGS="${OPTIONAL_ARGS} -e CG_NAME=${ROUTE_HOSTNAME} -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} -e eureka.client.fetchRegistry=true -e eureka.client.registerWithEureka=true -e "spring.application.name=${INVENTORY_MSNAME}" -e "server.context-path=${CTXPATH}" -e "eureka.client.serviceUrl.defaultZone=${EUREKA_REGISTRY_URL}" -e "spring.datasource.url=${JDBC_URL}" -e "spring.datasource.username=${MYSQL_USER}" -e "spring.datasource.password=${MYSQL_PASSWORD}""
      log_and_echo "Optional Args: ${OPTIONAL_ARGS}"

      # Deploy Container Group:
      # Optional environment properties (can be set directly in this script, or defined as environment properties):
      #      NAME              Value         Description
      #   =============      =========     ==============
      #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   ROUTE_DOMAIN        String       Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
      #   DESIRED_INSTANCES:  Number       Specify the number of instances in the group.  Default value is 1.
      #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default value is false.

      #                                    Default is false.
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
      #                                                            large (4096), x-large (8192), 2x-large (16384).
      #                                    Default is micro (256).
      #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
      #                                    Default is 1
      # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
      /bin/bash deployscripts/deploygroup.sh

      RESULT=$?

      # source the deploy property file
      if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
        source "$DEPLOY_PROPERTY_FILE"
      fi

      #########################
      # Environment DETAILS   #
      #########################
      # The environment has been setup.
      # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
      fi
      echo -e "${green}Execution complete${no_label}"
